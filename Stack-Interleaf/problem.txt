This problem was asked by Google.

Given a stack of N elements, interleave the first half of the stack with the second half reversed 
using only one other queue. This should be done in-place.

Recall that you can only push or pop from a stack, and enqueue or dequeue from a queue.

For example, if the stack is [1, 2, 3, 4, 5], it should become [1, 5, 2, 4, 3]. If the stack is 
[1, 2, 3, 4], it should become [1, 4, 2, 3].

Hint: Try working backwords from the end state.

[] [4 3 2 1]
[1] [4 3 2]
[1 4] [3 2]
[1 4 3] [2]-> Intermediate state
[1 4 2] [3]
 if index to insert%2==0, then shuffle and insert
 else: insert

lenStack, lenQ, lenO =0,0,0
dump stack into q:  val= stack.pop()-> q.enQ(val). lenQ+=1
lenO=lenQ
idx=0
while(idx<lenO){
    if(idx%2==0){
        val=Q.deQ()
        stack.push(val);
        lenQ-=1;
        lenStack+=1;
    }else{
        //odd index
        for(i=0; i<lenQ-1; i++){
            val=Q.deQ()
            stack.push(val);
            stack.pop()
            Q.enQ(val)
        }
        val=Q.deQ()
        stack.push(val);
        lenQ-=1;
        lenStack+=1;
    }
}
